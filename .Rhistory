}else if(all(names(events) == c("events","bg"))){
search.terms<-rownames(events$events)
}else{
search.terms<-events
}
# Get a list of go terms by gene using an API
search.terms <- search.terms %>% gsub(pattern = "\\(.*\\)",replacement = "") %>% trimws
dict         <- queryMany(search.terms, scopes='symbol', fields=c('entrezgene', 'go'), species='human',return.as = "DataFrame")
dict$notfound[is.na(dict$notfound)]<-FALSE
print(environment())
# Create a dictionary that allows us to search for the go terms of genes
dictionary<-list()
for(g in search.terms){
ind<-which(dict$query==g)
if(any(dict$notfound[ind]!=TRUE)){
if(length(ind)>1){ind=ind[1]}
BP<-dict$go.BP[[ind]]$term
MF<-dict$go.MF[[ind]]$term
CC<-dict$go.CC[[ind]]$term
g<-list(BP=BP,MF=MF,CC=CC)
}else{
BP<-"Not Found"
MF<-"Not Found"
CC<-"Not Found"
g<-list(BP=BP,MF=MF,CC=CC)
}
dictionary<-append(dictionary,values = list(g))
}
names(dictionary)<-search.terms
# Now allow the dictionary to be searched in reverse as well
types<-c("bp","mf","cc")
stacks<-list()
for(type in types){
terms<-dictionary %>% sapply(FUN = `[[`, toupper(type)) %>%
stack %>% as.data.table
stacks <- append(stacks,values = terms)
}
stacks<-list()
for(type in types){
stacks<-append(stacks,
list({
dictionary %>% sapply(FUN = `[[`, toupper(type)) %>% stack %>% as.data.table
}))
}
names(stacks)<-types
vals<-list()
for(type in types){
vals<-append(vals,
list({
stacks[[type]] %>% dplyr::select(values) %>% unique %>% unlist(use.names = FALSE)
}))
}
names(vals)<-type
dict.reverse<-list()
for(type in types){
a <- list()
for(go in vals[[type]]){
a <- append(a,
list({
stacks[[type]] %>% subset(values==go) %>% .$ind %>% unique %>% as.character
}))
}
names(a)<-vals[[type]]
dict.reverse<-append(dict.reverse,a)
}
append(list(gene = dictionary),dict.reverse)
}
test<-makeDictionary(events)
#' Make a dictionary of gene ontology terms, given a list of genes.
#'
#' Uses myGene.io to build a dictionary of gene ontology terms. It relies on myGene's query many function to build this list.
#' The difference here is this function also allows for forward and reverse lookups (either go terms associated with a gene, or genes assoicated with a go term).
#' This is largely to improve performance within the application. This function is also necessary to run group-wise tests defined by gene ontology terms.
#' @param mtdt Can either be an indicator matrix of the type used by the discover test (see ?\code{\link{buildDirectory}}) or a list of genes.
#' @import magrittr dplyr data.table mygene
#' @return This will return a nested list. The list can be searched by either genes (searching associated gene ontology terms) or by gene ontology term (in this case searching for associated genes).
#' @export
makeDictionary <- function(events){
if(is.matrix(events)){
search.terms<-rownames(events)
}else if(all(names(events) == c("events","bg"))){
search.terms<-rownames(events$events)
}else{
search.terms<-events
}
# Get a list of go terms by gene using an API
search.terms <- search.terms %>% gsub(pattern = "\\(.*\\)",replacement = "") %>% trimws
dict         <- queryMany(search.terms, scopes='symbol', fields=c('entrezgene', 'go'), species='human',return.as = "DataFrame")
dict$notfound[is.na(dict$notfound)]<-FALSE
print(environment())
# Create a dictionary that allows us to search for the go terms of genes
dictionary<-list()
for(g in search.terms){
ind<-which(dict$query==g)
if(any(dict$notfound[ind]!=TRUE)){
if(length(ind)>1){ind=ind[1]}
BP<-dict$go.BP[[ind]]$term
MF<-dict$go.MF[[ind]]$term
CC<-dict$go.CC[[ind]]$term
g<-list(BP=BP,MF=MF,CC=CC)
}else{
BP<-"Not Found"
MF<-"Not Found"
CC<-"Not Found"
g<-list(BP=BP,MF=MF,CC=CC)
}
dictionary<-append(dictionary,values = list(g))
}
names(dictionary)<-search.terms
# Now allow the dictionary to be searched in reverse as well
types<-c("bp","mf","cc")
stacks<-list()
for(type in types){
terms<-dictionary %>% sapply(FUN = `[[`, toupper(type)) %>%
stack %>% as.data.table
stacks <- append(stacks,values = terms)
}
stacks<-list()
for(type in types){
stacks<-append(stacks,
list({
dictionary %>% sapply(FUN = `[[`, toupper(type)) %>% stack %>% as.data.table
}))
}
names(stacks)<-types
vals<-list()
for(type in types){
vals<-append(vals,
list({
stacks[[type]] %>% dplyr::select(values) %>% unique %>% unlist(use.names = FALSE)
}))
}
names(vals)<-type
dict.reverse<-list()
for(type in types){
a <- list()
for(go in vals[[type]]){
a <- append(a,
list({
stacks[[type]] %>% subset(values==go) %>% .$ind %>% unique %>% as.character
}))
}
names(a)<-vals[[type]]
dict.reverse<-append(dict.reverse,list(a))
}
names(dict.reverse)<-types
append(list(gene = dictionary),dict.reverse)
}
test<-makeDictionary(events)
test$bp
if(is.matrix(events)){
search.terms<-rownames(events)
}else if(all(names(events) == c("events","bg"))){
search.terms<-rownames(events$events)
}else{
search.terms<-events
}
# Get a list of go terms by gene using an API
search.terms <- search.terms %>% gsub(pattern = "\\(.*\\)",replacement = "") %>% trimws
dict         <- queryMany(search.terms, scopes='symbol', fields=c('entrezgene', 'go'), species='human',return.as = "DataFrame")
dict$notfound[is.na(dict$notfound)]<-FALSE
print(environment())
# Create a dictionary that allows us to search for the go terms of genes
dictionary<-list()
for(g in search.terms){
ind<-which(dict$query==g)
if(any(dict$notfound[ind]!=TRUE)){
if(length(ind)>1){ind=ind[1]}
BP<-dict$go.BP[[ind]]$term
MF<-dict$go.MF[[ind]]$term
CC<-dict$go.CC[[ind]]$term
g<-list(BP=BP,MF=MF,CC=CC)
}else{
BP<-"Not Found"
MF<-"Not Found"
CC<-"Not Found"
g<-list(BP=BP,MF=MF,CC=CC)
}
dictionary<-append(dictionary,values = list(g))
}
names(dictionary)<-search.terms
# Now allow the dictionary to be searched in reverse as well
types<-c("bp","mf","cc")
stacks<-list()
for(type in types){
terms<-dictionary %>% sapply(FUN = `[[`, toupper(type)) %>%
stack %>% as.data.table
stacks <- append(stacks,values = terms)
}
stacks<-list()
for(type in types){
stacks<-append(stacks,
list({
dictionary %>% sapply(FUN = `[[`, toupper(type)) %>% stack %>% as.data.table
}))
}
names(stacks)<-types
vals<-list()
for(type in types){
vals<-append(vals,
list({
stacks[[type]] %>% dplyr::select(values) %>% unique %>% unlist(use.names = FALSE)
}))
}
names(vals)<-type
types
dict.reverse<-list()
for(type in types){
a <- list()
for(go in vals[[type]]){
a <- append(a,
list({
stacks[[type]] %>% subset(values==go) %>% .$ind %>% unique %>% as.character
}))
}
names(a)<-vals[[type]]
dict.reverse<-append(dict.reverse,list(a))
}
names(dict.reverse)<-types
dict.reverse$bp
dict.reverse$mf
dict.reverse$cc
type<-types[1]
a <- list()
dict.reverse<-list()
a <- list()
for(go in vals[[type]]){
a <- append(a,
list({
stacks[[type]] %>% subset(values==go) %>% .$ind %>% unique %>% as.character
}))
}
names(a)<-vals[[type]]
vals[[type]]
names(vals)
stacks<-list()
for(type in types){
stacks<-append(stacks,
list({
dictionary %>% sapply(FUN = `[[`, toupper(type)) %>% stack %>% as.data.table
}))
}
names(stacks)<-types
names(stacks)
vals<-list()
for(type in types){
vals<-append(vals,
list({
stacks[[type]] %>% dplyr::select(values) %>% unique %>% unlist(use.names = FALSE)
}))
}
names(vals)<-type
names(vals)<-types
dict.reverse<-list()
for(type in types){
a <- list()
for(go in vals[[type]]){
a <- append(a,
list({
stacks[[type]] %>% subset(values==go) %>% .$ind %>% unique %>% as.character
}))
}
names(a)<-vals[[type]]
dict.reverse<-append(dict.reverse,list(a))
}
names(dict.reverse)<-types
dict.reverse$bp
check<-append(list(gene = dictionary),dict.reverse)
check$gene$AKT2$BP
check$mf$`magnesium ion binding`
#' Make a dictionary of gene ontology terms, given a list of genes.
#'
#' Uses myGene.io to build a dictionary of gene ontology terms. It relies on myGene's query many function to build this list.
#' The difference here is this function also allows for forward and reverse lookups (either go terms associated with a gene, or genes assoicated with a go term).
#' This is largely to improve performance within the application. This function is also necessary to run group-wise tests defined by gene ontology terms.
#' @param mtdt Can either be an indicator matrix of the type used by the discover test (see ?\code{\link{buildDirectory}}) or a list of genes.
#' @import magrittr dplyr data.table mygene
#' @return This will return a nested list. The list can be searched by either genes (searching associated gene ontology terms) or by gene ontology term (in this case searching for associated genes).
#' @export
makeDictionary <- function(events){
if(is.matrix(events)){
search.terms<-rownames(events)
}else if(all(names(events) == c("events","bg"))){
search.terms<-rownames(events$events)
}else{
search.terms<-events
}
# Get a list of go terms by gene using an API
search.terms <- search.terms %>% gsub(pattern = "\\(.*\\)",replacement = "") %>% trimws
dict         <- queryMany(search.terms, scopes='symbol', fields=c('entrezgene', 'go'), species='human',return.as = "DataFrame")
dict$notfound[is.na(dict$notfound)]<-FALSE
print(environment())
# Create a dictionary that allows us to search for the go terms of genes
dictionary<-list()
for(g in search.terms){
ind<-which(dict$query==g)
if(any(dict$notfound[ind]!=TRUE)){
if(length(ind)>1){ind=ind[1]}
BP<-dict$go.BP[[ind]]$term
MF<-dict$go.MF[[ind]]$term
CC<-dict$go.CC[[ind]]$term
g<-list(BP=BP,MF=MF,CC=CC)
}else{
BP<-"Not Found"
MF<-"Not Found"
CC<-"Not Found"
g<-list(BP=BP,MF=MF,CC=CC)
}
dictionary<-append(dictionary,values = list(g))
}
names(dictionary)<-search.terms
# Now allow the dictionary to be searched in reverse as well
types<-c("bp","mf","cc")
stacks<-list()
for(type in types){
terms<-dictionary %>% sapply(FUN = `[[`, toupper(type)) %>%
stack %>% as.data.table
stacks <- append(stacks,values = terms)
}
stacks<-list()
for(type in types){
stacks<-append(stacks,
list({
dictionary %>% sapply(FUN = `[[`, toupper(type)) %>% stack %>% as.data.table
}))
}
names(stacks)<-types
vals<-list()
for(type in types){
vals<-append(vals,
list({
stacks[[type]] %>% dplyr::select(values) %>% unique %>% unlist(use.names = FALSE)
}))
}
names(vals)<-types
dict.reverse<-list()
for(type in types){
a <- list()
for(go in vals[[type]]){
a <- append(a,
list({
stacks[[type]] %>% subset(values==go) %>% .$ind %>% unique %>% as.character
}))
}
names(a)<-vals[[type]]
dict.reverse<-append(dict.reverse,list(a))
}
names(dict.reverse)<-types
append(list(gene = dictionary),dict.reverse)
}
#' Make a dictionary of gene ontology terms, given a list of genes.
#'
#' Uses myGene.io to build a dictionary of gene ontology terms. It relies on myGene's query many function to build this list.
#' The difference here is this function also allows for forward and reverse lookups (either go terms associated with a gene, or genes assoicated with a go term).
#' This is largely to improve performance within the application. This function is also necessary to run group-wise tests defined by gene ontology terms.
#' @param mtdt Can either be an indicator matrix of the type used by the discover test (see ?\code{\link{buildDirectory}}) or a list of genes.
#' @import magrittr dplyr data.table mygene
#' @return This will return a nested list. The list can be searched by either genes (searching associated gene ontology terms) or by gene ontology term (in this case searching for associated genes).
#' @export
makeDictionary <- function(events){
if(is.matrix(events)){
search.terms<-rownames(events)
}else if(all(names(events) == c("events","bg"))){
search.terms<-rownames(events$events)
}else{
search.terms<-events
}
# Get a list of go terms by gene using an API
search.terms <- search.terms %>% gsub(pattern = "\\(.*\\)",replacement = "") %>% trimws
dict         <- queryMany(search.terms, scopes='symbol', fields=c('entrezgene', 'go'), species='human',return.as = "DataFrame")
dict$notfound[is.na(dict$notfound)]<-FALSE
print(environment())
# Create a dictionary that allows us to search for the go terms of genes
dictionary<-list()
for(g in search.terms){
ind<-which(dict$query==g)
if(any(dict$notfound[ind]!=TRUE)){
if(length(ind)>1){ind=ind[1]}
BP<-dict$go.BP[[ind]]$term
MF<-dict$go.MF[[ind]]$term
CC<-dict$go.CC[[ind]]$term
g<-list(BP=BP,MF=MF,CC=CC)
}else{
BP<-"Not Found"
MF<-"Not Found"
CC<-"Not Found"
g<-list(BP=BP,MF=MF,CC=CC)
}
dictionary<-append(dictionary,values = list(g))
}
names(dictionary)<-search.terms
# Now allow the dictionary to be searched in reverse as well
types<-c("bp","mf","cc")
stacks<-list()
for(type in types){
terms<-dictionary %>% sapply(FUN = `[[`, toupper(type)) %>%
stack %>% as.data.table
stacks <- append(stacks,values = terms)
}
suppressWarnings({
stacks<-list()
for(type in types){
stacks<-append(stacks,
list({
dictionary %>% sapply(FUN = `[[`, toupper(type)) %>% stack %>% as.data.table
}))
}
names(stacks)<-types
vals<-list()
for(type in types){
vals<-append(vals,
list({
stacks[[type]] %>% dplyr::select(values) %>% unique %>% unlist(use.names = FALSE)
}))
}
names(vals)<-types
})
dict.reverse<-list()
for(type in types){
a <- list()
for(go in vals[[type]]){
a <- append(a,
list({
stacks[[type]] %>% subset(values==go) %>% .$ind %>% unique %>% as.character
}))
}
names(a)<-vals[[type]]
dict.reverse<-append(dict.reverse,list(a))
}
names(dict.reverse)<-types
append(list(gene = dictionary),dict.reverse)
}
test<-makeDictionary(events)
#' Make a dictionary of gene ontology terms, given a list of genes.
#'
#' Uses myGene.io to build a dictionary of gene ontology terms. It relies on myGene's query many function to build this list.
#' The difference here is this function also allows for forward and reverse lookups (either go terms associated with a gene, or genes assoicated with a go term).
#' This is largely to improve performance within the application. This function is also necessary to run group-wise tests defined by gene ontology terms.
#' @param mtdt Can either be an indicator matrix of the type used by the discover test (see ?\code{\link{buildDirectory}}) or a list of genes.
#' @import magrittr dplyr data.table mygene
#' @return This will return a nested list. The list can be searched by either genes (searching associated gene ontology terms) or by gene ontology term (in this case searching for associated genes).
#' @export
makeDictionary <- function(events){
if(is.matrix(events)){
search.terms<-rownames(events)
}else if(all(names(events) == c("events","bg"))){
search.terms<-rownames(events$events)
}else{
search.terms<-events
}
# Get a list of go terms by gene using an API
search.terms <- search.terms %>% gsub(pattern = "\\(.*\\)",replacement = "") %>% trimws
dict         <- queryMany(search.terms, scopes='symbol', fields=c('entrezgene', 'go'), species='human',return.as = "DataFrame")
dict$notfound[is.na(dict$notfound)]<-FALSE
print(environment())
# Create a dictionary that allows us to search for the go terms of genes
dictionary<-list()
for(g in search.terms){
ind<-which(dict$query==g)
if(any(dict$notfound[ind]!=TRUE)){
if(length(ind)>1){ind=ind[1]}
BP<-dict$go.BP[[ind]]$term
MF<-dict$go.MF[[ind]]$term
CC<-dict$go.CC[[ind]]$term
g<-list(BP=BP,MF=MF,CC=CC)
}else{
BP<-"Not Found"
MF<-"Not Found"
CC<-"Not Found"
g<-list(BP=BP,MF=MF,CC=CC)
}
dictionary<-append(dictionary,values = list(g))
}
names(dictionary)<-search.terms
# Now allow the dictionary to be searched in reverse as well
types<-c("bp","mf","cc")
suppressWarnings({
stacks<-list()
for(type in types){
stacks<-append(stacks,
list({
dictionary %>% sapply(FUN = `[[`, toupper(type)) %>% stack %>% as.data.table
}))
}
names(stacks)<-types
vals<-list()
for(type in types){
vals<-append(vals,
list({
stacks[[type]] %>% dplyr::select(values) %>% unique %>% unlist(use.names = FALSE)
}))
}
names(vals)<-types
})
dict.reverse<-list()
for(type in types){
a <- list()
for(go in vals[[type]]){
a <- append(a,
list({
stacks[[type]] %>% subset(values==go) %>% .$ind %>% unique %>% as.character
}))
}
names(a)<-vals[[type]]
dict.reverse<-append(dict.reverse,list(a))
}
names(dict.reverse)<-types
append(list(gene = dictionary),dict.reverse)
}
test<-makeDictionary(events)
devtools::install("discoverAnalytics")
devtools::install("../discoverAnalytics")
